#!/bin/bash - 
#===============================================================================
#          FILE:  |FILENAME|
#         USAGE:  <see f_usage()>
#   DESCRIPTION:  <see f_usage()>
#       OPTIONS:  <see f_usage()>
#  REQUIREMENTS:  ---
#          BUGS:  ---
#         NOTES:  ---
#        AUTHOR:  |AUTHOR| (|AUTHORREF|), |EMAIL|
#       COMPANY:  |COMPANY|
#       VERSION:  1.0
#       CREATED:  |DATETIME|
#      REVISION:  ---
#===============================================================================
#PS4='[${LINENO}]+'
#typeset -ft $(typeset +f)
#set -o xtrace
#set -o errexit
set -o nounset                              # Treat unset variables as an error

f_usage(){
   local scriptname="$( basename "$0" )"
   cat <<__usageHEREDOC__
Usage: $scriptname <-a|--long-arg-a> [-b|--long-opt-b]

This script le-blah-bladdie-bladdie-blah.

-a|--long-arg-a
                Argument --long-arg is for le long-arg arg. Or
can be specified with le -a short-arg arg and it
blah's with bazz's meme, if you're lucky, and is also
required.  Takes no arguments
-b|--long-opt-b
                Option --long-opt is for le long-opt opt. Or
can be specified with le -b short-opt and it blah's and
is optional unless you're a vegetable.

Examples
  $scriptname -a
  $scriptname -a --long-opt-b

Enhancement Ideas
force           Simply 
and next line continuing
__usageHEREDOC__
   exit 1
}


if [[ $# != 3 ]] && [[ $# != 4 ]] ; then
   echo "ERROR: $# is not enough cmdln arguments"
   f_usage
fi



#
# PARSE CMDLN, VARIABLE DEFINITIONS, SANITY CHECKS && META GENERATION
#====================================================================
#
ARGC="$#"
while [[ "$1" = -* ]] ; do
   case $1 in
      --pidfile) # specified like: --key value
         pid_file=$2
         shift 2
         ;;
      --pidfile=?*) # specified like: --key=value
         pid_file=${1#--pidfile=}
         shift
         ;;
      --force) # no-value arg / flag ; specified like: --key
         force="force"
         shift
         ;;
      *)  
        echo "ERROR case matched wildcard"
        f_usage
        ;;
   esac
done

while [ "$#" -gt "0" ] ; do
   case $1 in
      --force) # specified like: --key
         ISFORCED="TRUE"
         ;;
      --path-to-runner-script=?*) # specified like: --key=value
         PATH_TO_RUNNER_SCRIPT="${1#--path-to-runner-script=}"
         ;;
      -u|--usage|-h|--help) # specified like: --key
         f_usage
         ;;
      *)
         echo "ERROR: invalid cmdln arguments $1"
         f_usage
         ;;
   esac
   shift
done

# A perhaps improved upon version of the previous while loop block?
while [ "$#" -gt "0" ] ; do
   case $1 in
      --block-size=?*) # specified like: --key=value
         BLOCKSIZE=${1#--block-size=}
         shift
         ;;
      #-b) # specified like: -k value
      #   BLOCKSIZE=$2
      #   shift 2
      #   ;;
      -b|--block-size) # specified like: -k value, or like: --key value
         BLOCKSIZE=$2
         shift 2
         ;;
      -q|--quiet) # specified like: -k, or like: --key
         ISQUIET="TRUE"
			shift
         ;;
      -u|--usage|-h|--help) # specified like: -k, or like: --key
         f_usage
         ;;
      *) # if user input didn't match any of the prior flags, 
         # going to assume it's the starting path. A sanity 
         # check will be performed after all cmdln args parsed.
         STARTINGPATH=$1
         shift
         ;;
   esac
done


#     <perhaps some test conditions make sense to check inputs, prior to the main 
#      variable param/error block...>
: ${STARTINGPATH:?ERROR: STARTINGPATH variable must be set}
# Is this path garbage or not?  bail if so.
hadoop fs -ls "$STARTINGPATH" >/dev/null  2>&1
if [[ $? != 0 ]] ; then
   echo "ERROR: $STARTINGPATH doesn't seem right as an HDFS path... bai."
   exit 2
fi



#
# VARIABLE PARAMS/INITIALIZATION AND SANITY CHECKING
#====================================================================
#
# vars to define if not defd; think "<cfparam=*..."
: ${ISQUIET:="FALSE"}
: ${ISFORCED:="FALSE"}
: ${TEMPDIR:=/tmp}

# required to be defined by now; think "<cfparam=* required=yes..."
: ${TEMPDIR2:?ERROR: not specified}
: ${HOME:?ERROR: HOME variable must be set}

# e.g. ../amazondev/runsparqlizerODSE.sh
: ${PATH_TO_RUNNER_SCRIPT:? "ERROR: --path-to-runner-script is required"}
fullPathToRunnerScript="$( f_getfullpath "${PATH_TO_RUNNER_SCRIPT}" )"


#
# FUNCTIONS AND ANY OTHER PRE-MAIN
#====================================================================
#
f_control_c(){
   # c-c was entered.
   #echo -en "\n*** Ouch! Exiting ***\n"
   exit 1
}

# trap keyboard interrupt (control-c)
trap f_control_c SIGINT


f_IsIgnored(){
   file="$1"
   grep "$file" ignore  >/dev/null  2>&1
   [[ $? = 0 ]] && echo 'true' && return
   echo 'false'
}


#if [ -n "${ISQUIET}" ] ; then
if [ x"${ISQUIET}" = x"TRUE" ] ; then
    exec &>/dev/null
fi


#
# MAIN
#====================================================================
#


