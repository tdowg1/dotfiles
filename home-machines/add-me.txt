
== bash aliases ==
cdeiw
cdeiwtrunk
cdsupersps
cdsuperjs


== bash functions ==
crud : create, read, update, dELETE

gitbranchdELETE
gitbranchdELETEupstream
gitbranchdELETEAll
gitbranchcREATEpushupstream
gitbranchuPDATEtrackupstream
DONE gitbranchcREATEpushupstreamandtrack
gitbranchcREATEfromupstream

gitcustombranch_updatealllocalbranches
set -x
i=0
git fetch --all
for branch in "$@"; do
    git checkout "$branch"      || exit 1
    git rebase "origin/$branch" || exit 1
    let i=$(( i + 1 ))
done
# return to originally checked out branch
git checkout @{-${i}}


^^here, the following use cases may help with determining werk needed for git function helpers
* 1
** am in master branch
** need to co origin/branchb, check it out, and set its upstream to origin
** 
* 2
** am in master branch
** want to *create* a branch, checki it out, 
** push it upstream and set it to track upstream
** 
* 3
** am in a branch that i want to push to upstream repo 
** (to me, this implies also that i want to SET it to track upstream)
** 


==== vmware tools isntall || upgrader ====
vmware-tools-upgrader
or
cd /tmp ; sudo tar zxf /media/VMware\ Tools/VMwareTools-*.tar.gz

# sudo vmware-tools-distrib/vmware-install.pl --help
# VMware Tools 8.4.8 build-491717 for Linux installer
# Usage: vmware-tools-distrib/vmware-install.pl [[-][-]d[efault]]
# default: Automatically answer questions with the proposed answer.
# [[-][-]prefix=<path to install product: bin, lib, doc>    Put the installation 
# at <path> instead of the default location.  This implies '--default'.

sudo vmware-tools-distrib/vmware-install.pl --default



== mvn crap ==
=== release's plugin ===
==== after failure snipp[ets  ====
===== mvn release:prepare FAILURE =====
rm pom.xml.tag pom.xml.releaseBackup  release.properties   &&  git co -- pom.xml

